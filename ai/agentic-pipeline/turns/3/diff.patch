diff --git a/ai/agentic-pipeline/turns/index.csv b/ai/agentic-pipeline/turns/index.csv
index a7e7924..f8217f7 100644
--- a/ai/agentic-pipeline/turns/index.csv
+++ b/ai/agentic-pipeline/turns/index.csv
@@ -1,2 +1,4 @@
 turnId,timestampUtc,task,branch,tag,testsPassed,testsFailed
 1,2025-09-30T16:45:58Z,execute turn 1,,,3,1
+2,2025-09-30T17:15:00Z,execute turn 2,,,0,0
+3,2025-09-30T17:40:00Z,execute turn 3,,,0,0
diff --git a/ai/context/.env b/ai/context/.env
index 7a99c2f..af3bec7 100644
--- a/ai/context/.env
+++ b/ai/context/.env
@@ -3,5 +3,5 @@ DATABASE_PORT=5432
 DATABASE_USERNAME=customer_service
 DATABASE_PASSWORD=customer_service
 DATABASE_NAME=customer_service
-DATABASE_SCHEMA=public
+DATABASE_SCHEMA=customer_domain
 DATABASE_SSL=false
diff --git a/api/.gitignore b/api/.gitignore
index b7f3963..d96813e 100644
--- a/api/.gitignore
+++ b/api/.gitignore
@@ -1,12 +1,14 @@
 # App: Customer Registration
 # Package: api
 # File: .gitignore
-# Version: 0.1.0
+# Version: 0.2.0
+# Turns: 1,3
 # Author: Codex Agent
-# Date: 2025-09-30T16:36:05+00:00
+# Date: 2025-09-30T17:40:00Z
 # Description: Ignore build artifacts, dependencies, and environment files for the API project.
 #
 /node_modules
 /dist
 /.env
 /coverage
+/*.tsbuildinfo
diff --git a/api/package-lock.json b/api/package-lock.json
index 7994444..89e8742 100644
--- a/api/package-lock.json
+++ b/api/package-lock.json
@@ -19,11 +19,13 @@
         "axios": "^1.9.0",
         "class-transformer": "^0.5.1",
         "class-validator": "^0.14.2",
+        "dotenv": "^16.4.7",
         "joi": "^17.10.0",
         "pg": "^8.16.0",
         "reflect-metadata": "^0.2.2",
         "rxjs": "^7.8.2",
-        "typeorm": "^0.3.24"
+        "typeorm": "^0.3.24",
+        "typeorm-naming-strategies": "^4.1.0"
       },
       "devDependencies": {
         "@nestjs/cli": "^11.0.7",
@@ -35,6 +37,7 @@
         "@types/supertest": "^6.0.3",
         "@typescript-eslint/eslint-plugin": "^8.33.1",
         "@typescript-eslint/parser": "^8.33.1",
+        "dotenv-cli": "^7.3.0",
         "eslint": "^9.28.0",
         "eslint-config-prettier": "^10.1.5",
         "eslint-plugin-prettier": "^5.4.1",
@@ -5551,6 +5554,32 @@
         "url": "https://dotenvx.com"
       }
     },
+    "node_modules/dotenv-cli": {
+      "version": "7.4.4",
+      "resolved": "https://registry.npmjs.org/dotenv-cli/-/dotenv-cli-7.4.4.tgz",
+      "integrity": "sha512-XkBYCG0tPIes+YZr4SpfFv76SQrV/LeCE8CI7JSEMi3VR9MvTihCGTOtbIexD6i2mXF+6px7trb1imVCXSNMDw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "cross-spawn": "^7.0.6",
+        "dotenv": "^16.3.0",
+        "dotenv-expand": "^10.0.0",
+        "minimist": "^1.2.6"
+      },
+      "bin": {
+        "dotenv": "cli.js"
+      }
+    },
+    "node_modules/dotenv-cli/node_modules/dotenv-expand": {
+      "version": "10.0.0",
+      "resolved": "https://registry.npmjs.org/dotenv-expand/-/dotenv-expand-10.0.0.tgz",
+      "integrity": "sha512-GopVGCpVS1UKH75VKHGuQFqS1Gusej0z4FyQkPdwjil2gNIv+LNsqBlboOzpJFZKVT95GkCyWJbBSdFEFUWI2A==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=12"
+      }
+    },
     "node_modules/dotenv-expand": {
       "version": "12.0.1",
       "resolved": "https://registry.npmjs.org/dotenv-expand/-/dotenv-expand-12.0.1.tgz",
@@ -11773,6 +11802,15 @@
         }
       }
     },
+    "node_modules/typeorm-naming-strategies": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/typeorm-naming-strategies/-/typeorm-naming-strategies-4.1.0.tgz",
+      "integrity": "sha512-vPekJXzZOTZrdDvTl1YoM+w+sUIfQHG4kZTpbFYoTsufyv9NIBRe4Q+PdzhEAFA2std3D9LZHEb1EjE9zhRpiQ==",
+      "license": "MIT",
+      "peerDependencies": {
+        "typeorm": "^0.2.0 || ^0.3.0"
+      }
+    },
     "node_modules/typeorm/node_modules/ansis": {
       "version": "3.17.0",
       "resolved": "https://registry.npmjs.org/ansis/-/ansis-3.17.0.tgz",
diff --git a/api/package.json b/api/package.json
index 1eec240..70ae1b1 100644
--- a/api/package.json
+++ b/api/package.json
@@ -17,7 +17,14 @@
     "test:watch": "jest --watch",
     "test:cov": "jest --coverage",
     "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
-    "test:e2e": "jest --config ./test/jest-e2e.json"
+    "test:e2e": "jest --config ./test/jest-e2e.json",
+    "db:validate": "dotenv -e ../ai/context/.env -e .env -- ts-node src/database/validate-connection.ts",
+    "typeorm:migration:create": "dotenv -e ../ai/context/.env -e .env -- typeorm migration:create src/migrations/Manual",
+    "typeorm:migration:generate": "dotenv -e ../ai/context/.env -e .env -- typeorm migration:generate src/migrations/Auto -d src/database/data-source.ts",
+    "typeorm:migration:run": "dotenv -e ../ai/context/.env -e .env -- node --require ts-node/register ./node_modules/typeorm/cli.js migration:run -d src/database/data-source.ts",
+    "typeorm:migration:revert": "dotenv -e ../ai/context/.env -e .env -- node --require ts-node/register ./node_modules/typeorm/cli.js migration:revert -d src/database/data-source.ts",
+    "typeorm:migration:run:js": "dotenv -e ../ai/context/.env -e .env -- node ./node_modules/typeorm/cli.js migration:run -d dist/database/data-source.js",
+    "typeorm:migration:revert:js": "dotenv -e ../ai/context/.env -e .env -- node ./node_modules/typeorm/cli.js migration:revert -d dist/database/data-source.js"
   },
   "dependencies": {
     "@nestjs/axios": "^4.0.0",
@@ -30,11 +37,13 @@
     "axios": "^1.9.0",
     "class-transformer": "^0.5.1",
     "class-validator": "^0.14.2",
+    "dotenv": "^16.4.7",
+    "joi": "^17.10.0",
     "pg": "^8.16.0",
     "reflect-metadata": "^0.2.2",
     "rxjs": "^7.8.2",
-    "joi": "^17.10.0",
-    "typeorm": "^0.3.24"
+    "typeorm": "^0.3.24",
+    "typeorm-naming-strategies": "^4.1.0"
   },
   "devDependencies": {
     "@nestjs/cli": "^11.0.7",
@@ -46,6 +55,7 @@
     "@types/supertest": "^6.0.3",
     "@typescript-eslint/eslint-plugin": "^8.33.1",
     "@typescript-eslint/parser": "^8.33.1",
+    "dotenv-cli": "^7.3.0",
     "eslint": "^9.28.0",
     "eslint-config-prettier": "^10.1.5",
     "eslint-plugin-prettier": "^5.4.1",
diff --git a/api/src/README-config.md b/api/src/README-config.md
index 944518d..362007b 100644
--- a/api/src/README-config.md
+++ b/api/src/README-config.md
@@ -18,3 +18,10 @@ export class ExampleService {
 
 2) Add strongly-typed helpers if desired (create a config.types.ts and wrap lookups).
 3) Validation lives in src/config/validation.ts; update when adding new env keys.
+
+## Database & Migrations
+
+1. Validate credentials with `npm run db:validate` (reads `ai/context/.env` by default).
+2. Run TypeORM migrations during development: `npm run typeorm:migration:run`.
+3. Build the project before applying compiled migrations in CI: `npm run build` then `npm run typeorm:migration:run:js`.
+4. Generate new migrations with `npm run typeorm:migration:generate` after updating entities.
diff --git a/api/src/app.module.ts b/api/src/app.module.ts
index 0a066db..8f64836 100644
--- a/api/src/app.module.ts
+++ b/api/src/app.module.ts
@@ -2,33 +2,59 @@
  * # App: Customer Registration API
  * # Package: api/src
  * # File: app.module.ts
- * # Version: 0.1.0
+ * # Version: 0.2.0
+ * # Turns: 1,3
  * # Author: Codex Agent
- * # Date: 2025-09-30T16:46:37+00:00
- * # Description: Root NestJS module configuring application-wide services, configuration loading, and middleware registration.
+ * # Date: 2025-09-30T17:20:00Z
+ * # Description: Root NestJS module configuring configuration loading, logging infrastructure, and TypeORM connectivity.
  * #
  * # Classes
- * # - AppModule: Declares configuration providers, shared logging infrastructure, and global middleware bindings.
+ * # - AppModule: Declares configuration providers, shared logging infrastructure, database integration, and global middleware bindings.
  */
+import * as path from 'node:path';
 import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';
 import { APP_INTERCEPTOR } from '@nestjs/core';
-import { ConfigModule } from '@nestjs/config';
+import { ConfigModule, ConfigService } from '@nestjs/config';
+import { TypeOrmModule } from '@nestjs/typeorm';
+import { SnakeNamingStrategy } from 'typeorm-naming-strategies';
 import configuration from './config/configuration';
 import { validationSchema } from './config/validation';
-import { HealthModule } from './health/health.module';
-import { RequestIdMiddleware } from './common/logging/request-id.middleware';
+import { CustomerModule } from './customer/customer.module';
 import { JsonLogger } from './common/logging/json-logger.service';
 import { LoggingInterceptor } from './common/logging/logging.interceptor';
+import { RequestIdMiddleware } from './common/logging/request-id.middleware';
+import { HealthModule } from './health/health.module';
+
+const CONTEXT_ENV = path.resolve(__dirname, '..', '..', 'ai', 'context', '.env');
 
 @Module({
   imports: [
     ConfigModule.forRoot({
       isGlobal: true,
-      envFilePath: ['.env'],
+      envFilePath: [CONTEXT_ENV, '.env'],
       load: [configuration],
       validationSchema,
     }),
+    TypeOrmModule.forRootAsync({
+      inject: [ConfigService],
+      useFactory: (config: ConfigService) => ({
+        type: 'postgres',
+        host: config.getOrThrow<string>('db.host'),
+        port: config.get<number>('db.port', 5432),
+        username: config.getOrThrow<string>('db.user'),
+        password: config.getOrThrow<string>('db.pass'),
+        database: config.getOrThrow<string>('db.name'),
+        schema: config.get<string>('db.schema', 'public'),
+        ssl: config.get<boolean>('db.ssl', false),
+        namingStrategy: new SnakeNamingStrategy(),
+        synchronize: false,
+        logging: false,
+        autoLoadEntities: true,
+        migrations: ['dist/migrations/*.js'],
+      }),
+    }),
     HealthModule,
+    CustomerModule,
   ],
   providers: [
     JsonLogger,
diff --git a/api/src/config/configuration.ts b/api/src/config/configuration.ts
index e688109..f610ec2 100644
--- a/api/src/config/configuration.ts
+++ b/api/src/config/configuration.ts
@@ -2,9 +2,10 @@
  * # App: Customer Registration API
  * # Package: api/src/config
  * # File: configuration.ts
- * # Version: 0.1.0
+ * # Version: 0.2.0
+ * # Turns: 1,3
  * # Author: Codex Agent
- * # Date: 2025-09-30T16:46:37+00:00
+ * # Date: 2025-09-30T17:20:00Z
  * # Description: Defines the configuration factory mapping environment variables into strongly-typed runtime settings.
  * #
  * # Functions
@@ -19,7 +20,7 @@ export default () => ({
   db: {
     host: process.env.DATABASE_HOST,
     port: parseInt(process.env.DATABASE_PORT ?? '5432', 10),
-    user: process.env.DATABASE_USER,
+    user: process.env.DATABASE_USERNAME ?? process.env.DATABASE_USER,
     pass: process.env.DATABASE_PASSWORD,
     name: process.env.DATABASE_NAME,
     schema: process.env.DATABASE_SCHEMA ?? 'public',
diff --git a/api/src/config/validation.ts b/api/src/config/validation.ts
index 7429732..95e66f4 100644
--- a/api/src/config/validation.ts
+++ b/api/src/config/validation.ts
@@ -2,9 +2,10 @@
  * # App: Customer Registration API
  * # Package: api/src/config
  * # File: validation.ts
- * # Version: 0.1.0
+ * # Version: 0.2.0
+ * # Turns: 1,3
  * # Author: Codex Agent
- * # Date: 2025-09-30T16:46:37+00:00
+ * # Date: 2025-09-30T17:20:00Z
  * # Description: Joi schema enforcing required environment variables and default values for configuration settings.
  * #
  * # Constants
@@ -20,7 +21,7 @@ export const validationSchema = Joi.object({
   PORT: Joi.number().integer().min(1).max(65535).default(3000),
   DATABASE_HOST: Joi.string().hostname().required(),
   DATABASE_PORT: Joi.number().integer().min(1).max(65535).default(5432),
-  DATABASE_USER: Joi.string().required(),
+  DATABASE_USERNAME: Joi.string().required(),
   DATABASE_PASSWORD: Joi.string().allow('').required(),
   DATABASE_NAME: Joi.string().required(),
   DATABASE_SCHEMA: Joi.string().default('public'),
