-- App: Customer Registration
-- Package: db
-- File: 01_customer_domain.sql
-- Version: 0.1.0
-- Turns: 1
-- Author: AI Agent
-- Date: 2025-09-19T23:14:05Z
-- Exports: customer, postal_address, privacy_settings, customer_email, customer_phone_number, customer_profile_flat
-- Description: Creates the normalized customer domain schema, supporting tables, constraints, indexes, and flattened view.

BEGIN;

CREATE SCHEMA IF NOT EXISTS customer_domain;

SET search_path TO customer_domain, public;

CREATE OR REPLACE FUNCTION customer_domain.touch_updated_at()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;

CREATE TABLE IF NOT EXISTS postal_address (
    address_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    line1 VARCHAR(255) NOT NULL,
    line2 VARCHAR(255),
    city VARCHAR(100) NOT NULL,
    state VARCHAR(100) NOT NULL,
    postal_code VARCHAR(20),
    country CHAR(2) NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_postal_address_country
    ON postal_address (country);
CREATE INDEX IF NOT EXISTS idx_postal_address_postal_code
    ON postal_address (postal_code);

CREATE TRIGGER trig_postal_address_touch_updated_at
BEFORE UPDATE ON postal_address
FOR EACH ROW
EXECUTE FUNCTION customer_domain.touch_updated_at();

CREATE TABLE IF NOT EXISTS privacy_settings (
    privacy_settings_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    marketing_emails_enabled BOOLEAN NOT NULL,
    two_factor_enabled BOOLEAN NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TRIGGER trig_privacy_settings_touch_updated_at
BEFORE UPDATE ON privacy_settings
FOR EACH ROW
EXECUTE FUNCTION customer_domain.touch_updated_at();

CREATE TABLE IF NOT EXISTS customer (
    customer_id UUID PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    middle_name VARCHAR(100),
    last_name VARCHAR(100) NOT NULL,
    preferred_email VARCHAR(320),
    address_id INTEGER REFERENCES postal_address(address_id) ON DELETE SET NULL,
    privacy_settings_id INTEGER REFERENCES privacy_settings(privacy_settings_id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT chk_customer_preferred_email_format
        CHECK (
            preferred_email IS NULL
            OR preferred_email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'
        )
);

CREATE INDEX IF NOT EXISTS idx_customer_last_name
    ON customer (last_name);
CREATE INDEX IF NOT EXISTS idx_customer_address_id
    ON customer (address_id);
CREATE INDEX IF NOT EXISTS idx_customer_privacy_settings_id
    ON customer (privacy_settings_id);
CREATE UNIQUE INDEX IF NOT EXISTS uq_customer_preferred_email
    ON customer (LOWER(preferred_email))
    WHERE preferred_email IS NOT NULL;

CREATE TRIGGER trig_customer_touch_updated_at
BEFORE UPDATE ON customer
FOR EACH ROW
EXECUTE FUNCTION customer_domain.touch_updated_at();

CREATE TABLE IF NOT EXISTS customer_email (
    email_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id UUID NOT NULL REFERENCES customer(customer_id) ON DELETE CASCADE,
    email VARCHAR(320) NOT NULL,
    is_primary BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT chk_customer_email_format
        CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$')
);

CREATE UNIQUE INDEX IF NOT EXISTS uq_customer_email_customer_id_email
    ON customer_email (customer_id, LOWER(email));
CREATE INDEX IF NOT EXISTS idx_customer_email_is_primary
    ON customer_email (is_primary)
    WHERE is_primary;
CREATE INDEX IF NOT EXISTS idx_customer_email_customer_id
    ON customer_email (customer_id);

CREATE TRIGGER trig_customer_email_touch_updated_at
BEFORE UPDATE ON customer_email
FOR EACH ROW
EXECUTE FUNCTION customer_domain.touch_updated_at();

CREATE TABLE IF NOT EXISTS customer_phone_number (
    phone_number_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id UUID NOT NULL REFERENCES customer(customer_id) ON DELETE CASCADE,
    phone_type VARCHAR(10) NOT NULL,
    phone_number VARCHAR(20) NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT chk_customer_phone_type
        CHECK (phone_type IN ('mobile', 'home', 'work', 'other')),
    CONSTRAINT chk_customer_phone_number_format
        CHECK (phone_number ~ '^\\+?[1-9]\\d{1,14}$')
);

CREATE UNIQUE INDEX IF NOT EXISTS uq_customer_phone_number_unique
    ON customer_phone_number (customer_id, phone_number);
CREATE INDEX IF NOT EXISTS idx_customer_phone_number_type
    ON customer_phone_number (phone_type);
CREATE INDEX IF NOT EXISTS idx_customer_phone_number_customer_id
    ON customer_phone_number (customer_id);

CREATE TRIGGER trig_customer_phone_number_touch_updated_at
BEFORE UPDATE ON customer_phone_number
FOR EACH ROW
EXECUTE FUNCTION customer_domain.touch_updated_at();

CREATE OR REPLACE VIEW customer_profile_flat AS
SELECT
    c.customer_id,
    c.first_name,
    c.middle_name,
    c.last_name,
    c.preferred_email,
    pa.line1,
    pa.line2,
    pa.city,
    pa.state,
    pa.postal_code,
    pa.country,
    ps.marketing_emails_enabled,
    ps.two_factor_enabled,
    COALESCE(
        ARRAY_AGG(DISTINCT ce.email) FILTER (WHERE ce.email IS NOT NULL),
        ARRAY[]::VARCHAR(320)[]
    ) AS emails,
    COALESCE(
        JSONB_AGG(DISTINCT jsonb_build_object('type', cpn.phone_type, 'number', cpn.phone_number))
        FILTER (WHERE cpn.phone_number IS NOT NULL),
        '[]'::JSONB
    ) AS phone_numbers
FROM customer c
LEFT JOIN postal_address pa ON c.address_id = pa.address_id
LEFT JOIN privacy_settings ps ON c.privacy_settings_id = ps.privacy_settings_id
LEFT JOIN customer_email ce ON c.customer_id = ce.customer_id
LEFT JOIN customer_phone_number cpn ON c.customer_id = cpn.customer_id
GROUP BY
    c.customer_id,
    pa.address_id,
    ps.privacy_settings_id;

COMMENT ON VIEW customer_profile_flat IS 'Flattened view that joins customer core data, addresses, privacy settings, emails, and phone numbers.';

COMMIT;

-- Smoke test: SELECT COUNT(*) FROM customer_domain.customer;
-- Smoke test: SELECT * FROM customer_domain.customer_profile_flat LIMIT 5;
