openapi: 3.0.0
paths:
  /health:
    get:
      operationId: HealthController_health
      parameters: []
      responses:
        "200":
          description: ""
      tags: &a1
        - Health
  /health/live:
    get:
      operationId: HealthController_liveness
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a1
  /health/ready:
    get:
      operationId: HealthController_readiness
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a1
  /customers:
    get:
      operationId: CustomerController_listCustomers
      parameters: []
      responses:
        "200":
          description: A collection of customers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResponseCustomerDto"
      summary: List customers
      tags: &a2
        - Customer
    post:
      operationId: CustomerController_createCustomer
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCustomerDto"
      responses:
        "201":
          description: Customer successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseCustomerDto"
        "400":
          description: Invalid payload supplied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
      summary: Create a new customer
      tags: *a2
  /customers/{id}:
    get:
      operationId: CustomerController_getCustomer
      parameters:
        - name: id
          required: true
          in: path
          description: Customer identifier
          schema:
            example: 8d5b1c5b-4744-45f5-9a65-8eaa0fbecf2a
            type: string
      responses:
        "200":
          description: Customer found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseCustomerDto"
        "404":
          description: Customer not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
      summary: Fetch a customer by identifier
      tags: *a2
    put:
      operationId: CustomerController_updateCustomer
      parameters:
        - name: id
          required: true
          in: path
          description: Customer identifier
          schema:
            example: 8d5b1c5b-4744-45f5-9a65-8eaa0fbecf2a
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCustomerDto"
      responses:
        "200":
          description: Customer successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseCustomerDto"
        "400":
          description: Invalid payload supplied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "404":
          description: Customer not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
      summary: Update an existing customer
      tags: *a2
    delete:
      operationId: CustomerController_deleteCustomer
      parameters:
        - name: id
          required: true
          in: path
          description: Customer identifier
          schema:
            example: 8d5b1c5b-4744-45f5-9a65-8eaa0fbecf2a
            type: string
      responses:
        "204":
          description: Customer deleted successfully.
        "404":
          description: Customer not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
      summary: Delete an existing customer
      tags: *a2
info:
  title: Customer Registration API
  description: HTTP API for managing the customer onboarding lifecycle.
  version: 0.0.1
  contact: {}
tags:
  - name: Customer
    description: ""
servers: []
components:
  schemas:
    ProblemDetail:
      type: object
      properties:
        statusCode:
          type: number
          example: 400
          description: HTTP status code for the error response.
        error:
          type: string
          example: Bad Request
          description: Short error classification or reason phrase.
        message:
          type: object
          example: Validation failed for the submitted payload.
          description: Human readable error message or summary.
        path:
          type: string
          example: /customers
          description: Request path that triggered the error.
        timestamp:
          type: string
          example: 2025-09-30T17:20:00.000Z
          description: UTC timestamp when the error was generated.
      required:
        - statusCode
        - error
        - message
        - path
        - timestamp
    CustomerPhoneNumberDto:
      type: object
      properties:
        type:
          type: string
          description: Type of phone number
          example: mobile
          enum:
            - mobile
            - home
            - work
            - other
        number:
          type: string
          description: Phone number in E.164 format
          example: "+15558675309"
      required:
        - type
        - number
    CustomerAddressDto:
      type: object
      properties:
        line1:
          type: string
          description: Street address, P.O. box, company name, c/o
          example: 123 Main St
        line2:
          type: object
          description: Apartment, suite, unit, building, floor, etc.
          example: Apt 4B
        city:
          type: string
          description: City or locality
          example: Springfield
        state:
          type: string
          description: State, province, or region
          example: IL
        postalCode:
          type: string
          description: ZIP or postal code
          example: "62704"
        country:
          type: string
          description: ISO 3166-1 alpha-2 country code
          example: US
      required:
        - line1
        - city
        - state
        - postalCode
        - country
    CustomerPrivacySettingsDto:
      type: object
      properties:
        marketingEmailsEnabled:
          type: boolean
          description: Whether the customer opts in to marketing emails.
          example: true
        twoFactorEnabled:
          type: boolean
          description: Whether the customer has two-factor authentication enabled.
          example: true
      required:
        - marketingEmailsEnabled
        - twoFactorEnabled
    ResponseCustomerDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the customer profile.
          example: 8d5b1c5b-4744-45f5-9a65-8eaa0fbecf2a
        firstName:
          type: string
          description: Customer's given name.
          example: Jane
        middleName:
          type: object
          description: Customer's middle name or initial.
          example: Alexandra
          nullable: true
        lastName:
          type: string
          description: Customer's family name.
          example: Doe
        emails:
          description: List of the customer's email addresses.
          type: array
          items:
            type: string
        phoneNumbers:
          description: List of the customer's phone numbers.
          type: array
          items:
            $ref: "#/components/schemas/CustomerPhoneNumberDto"
        address:
          description: Postal address of the customer.
          nullable: true
          allOf:
            - $ref: "#/components/schemas/CustomerAddressDto"
        privacySettings:
          description: Customer privacy preferences.
          allOf:
            - $ref: "#/components/schemas/CustomerPrivacySettingsDto"
      required:
        - id
        - firstName
        - lastName
        - emails
        - privacySettings
    CreateCustomerDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the customer profile.
          example: 8d5b1c5b-4744-45f5-9a65-8eaa0fbecf2a
        firstName:
          type: string
          description: Customer's given name.
          example: Jane
        middleName:
          type: object
          description: Customer's middle name or initial.
          example: Alexandra
        lastName:
          type: string
          description: Customer's family name.
          example: Doe
        emails:
          description: List of the customer's email addresses.
          example: &a3
            - jane.doe@example.com
          type: array
          items:
            type: string
        phoneNumbers:
          description: List of the customer's phone numbers.
          type: array
          items:
            $ref: "#/components/schemas/CustomerPhoneNumberDto"
        address:
          description: Postal address of the customer.
          allOf:
            - $ref: "#/components/schemas/CustomerAddressDto"
        privacySettings:
          description: Customer privacy preferences.
          allOf:
            - $ref: "#/components/schemas/CustomerPrivacySettingsDto"
      required:
        - id
        - firstName
        - lastName
        - emails
        - privacySettings
    UpdateCustomerDto:
      type: object
      properties:
        firstName:
          type: string
          description: Customer's given name.
          example: Jane
        middleName:
          type: object
          description: Customer's middle name or initial.
          example: Alexandra
        lastName:
          type: string
          description: Customer's family name.
          example: Doe
        emails:
          description: List of the customer's email addresses.
          example: *a3
          type: array
          items:
            type: string
        address:
          description: Updated postal address. Provide `null` to remove the current address.
          nullable: true
          allOf:
            - $ref: "#/components/schemas/CustomerAddressDto"
        phoneNumbers:
          description: Updated phone numbers. Provide an empty array to remove all numbers.
          type: array
          items:
            $ref: "#/components/schemas/CustomerPhoneNumberDto"
        privacySettings:
          description: Updated privacy preferences.
          allOf:
            - $ref: "#/components/schemas/CustomerPrivacySettingsDto"
